import { useState } from 'react'
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import styles from '../../styles/Home.module.css'
import { NextPage } from 'next'
import { useRouter } from 'next/router'
import { 
    useToast,
    Grid,
    GridItem,
    Box,
    Flex,
    Button, 
    Badge,
    Table,
    Thead,
    Tbody,
    Tfoot,
    Tr,
    Th,
    Td,
    TableCaption,
    Divider,
    Heading,
    Center,
    Tag,
    TagLabel,
    TagCloseButton 
} from "@chakra-ui/react"
import Api from "../../api"
import { isEmpty } from "lodash"
import { BranchPostData, PropsData } from "../../_types/BranchProps"

const deleteMeal = (id:number) => {
    return new Promise((resolve, reject)=>{
        Api.singleRequest(Api.deleteMeal(id)).then((data)=>{
            resolve(data)
        }).catch(err=>{
            reject(err)
        })
    })
}

const BranchIndex: NextPage<PropsData> = ({branch, error}) => {
    console.log(branch)
  const [isLoading, setIsLoading] = useState(false)
  const [fields, setFields] = useState<BranchPostData>({
      name:'',
      open:'',
      close:'',
      lat:'',
      lng:''
  })
  const [errors, setErrors] = useState<any>({})
  const router = useRouter()
  const toast = useToast()

  const refreshData = () => router.replace(router.asPath);

  const handleChange = (e:any) =>{
      setFields({...fields,[e.target.name]:e.target.value})
  }
  const onBack = (e:any) => {
    e.preventDefault()
    router.push("/")
  }

  const onAddMeal = (e:any) => {
    e.preventDefault()
    router.push(`/meal/add?branch=${branch.id}`)
  }

  const onEditBranch = (id:number) => {
    router.push(`/branch/${id}`)
  }

  const onSubmit = () => {

    
  }

  const onDeleteMeal = (name:string, id:number) => {
    deleteMeal(id)
        .then(res=>{
            toast({
                title: `Buffet ${name} removed.`,
                status: "success",
                duration: 2000,
                isClosable: true,
            })
            setTimeout(()=>{
                refreshData()
            },500)
        })
        
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Branch</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {error ? <div>
          Not found branch
      </div>:<main className={styles.content}>
        <h3 className={styles.title}>
          {branch.name} Branch
        </h3>

        <div className={styles.metaDescription}>
            <Badge mr={2} bg={"teal.50"} color={"teal"}>Open: {branch.open}</Badge>
            <Badge>Close: {branch.close}</Badge>
        </div>
        

        <div className={styles.description}>
            <Button colorScheme="blue" mr={4} variant="outline"  onClick={onBack}>Back to Index</Button>
            <Button colorScheme="blue" mr={4} onClick={onAddMeal}>Add Meal</Button>
            <Button colorScheme="teal" onClick={()=>onEditBranch(branch.id)}>Edit Branch</Button>
        </div>

        <Center height="50px">
            <Divider orientation="horizontal" />
        </Center>

        <Flex>
            <Box w="300px">
                <Heading style={{textAlign:"left"}} mb={5} as="h5" size="md">Meals </Heading>
                {!isEmpty(branch.Meals) && branch.Meals.map((meal:any)=>{
                    return <Tag key={meal.id} borderRadius="full" size={"lg"} mr={4} mb={3} variant="solid" colorScheme="teal">
                        <TagLabel>{meal.name}</TagLabel>
                        <TagCloseButton onClick={()=>onDeleteMeal(meal.name, meal.id)} />
                    </Tag>
                })}
            </Box>
            <Box w="500px">
                <Heading style={{textAlign:"center"}} mb={5} as="h5" size="lg">Plans </Heading>
                <Table variant="simple" style={{width:'100%'}}>
                    <Thead>
                        <Tr>
                            <Th>Mo</Th>
                            <Th>Tu</Th>
                            <Th>We</Th>
                            <Th>Th</Th>
                            <Th>Fr</Th>
                            <Th>Sa</Th>
                            <Th>Su</Th>
                        </Tr>
                    </Thead>
                    <Tbody>
                        <Tr>
                            <Td colSpan={7}>No plans</Td>
                        </Tr>
                      
                    </Tbody>
                    
                </Table>
            </Box>
        </Flex>

      </main>}

    </div>
  )
}

BranchIndex.getInitialProps = async ({req, query}:any) => {
    let slug:string|null = query?.id
    let branch:any = {}
    let errs:any = null
    
    if( slug ) {
        try {
            let index:number = parseInt(slug)
            const resApi = await Api.singleRequest(Api.getBranch({},index));
            branch = resApi.data.data
        } catch (error) {
            errs = error   
        }
    }
    
    return {
        branch:branch,
        error:errs
    }
}

export default BranchIndex