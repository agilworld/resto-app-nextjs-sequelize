import { useState, useEffect } from 'react'
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import styles from '../../styles/Home.module.css'
import { NextPage } from 'next'
import { useRouter } from 'next/router'
import { 
    useToast,
    Grid,
    GridItem,
    Box,
    Button, 
    FormControl,
    FormLabel,
    Input,
    FormErrorMessage,
    FormHelperText,
} from "@chakra-ui/react"
import Api from "../../api.js"
import { isEmpty } from "lodash"
import { BranchItemData, BranchPostData, PropsData } from "../../_types/BranchProps"
import { absoluteUrl } from "../../utils"

const addBranch = (fields:any) => {
    return new Promise((resolve, reject)=>{
        Api.singleRequest(Api.createBranch(fields)).then((data)=>{
            resolve(data)
        }).catch(err=>{
            reject(err)
        })
    })
}

const updateBranch = (id:number, fields:any) => {
    return new Promise((resolve, reject)=>{
        Api.singleRequest(Api.updateBranch(id, fields)).then((data)=>{
            resolve(data)
        }).catch((err:any)=>{
            reject(err)
        })
    })
}


const BranchItem: NextPage<PropsData> = ({branch,...props}) => {
    const [isLoading, setIsLoading] = useState(false)
    const [fields, setFields] = useState<BranchPostData>({
        name:'',
        open:'',
        close:'',
        lat:'',
        lng:''
    })
    const [errors, setErrors] = useState<any>({})
    const router = useRouter()
    const toast = useToast()

    useEffect(() => {
        if( !isEmpty(branch) ) {
            setFields({
                name:branch.name,
                open:branch.open,
                close:branch.close,
                lat:branch.lat.toString(),
                lng:branch.lng.toString()
            })
        }
    }, [branch]);

    const handleChange = (e:any) =>{
        setFields({...fields,[e.target.name]:e.target.value})
    }

    const onBack = (e:any) => {
        e.preventDefault()
        router.push("/")
    }

    const onSubmit = () => {
        if( ! isEmpty(fields.name) && ! isEmpty(fields.open) && ! isEmpty(fields.close) && ! isEmpty(fields.lat) && ! isEmpty(fields.lng) ) {
            setIsLoading(true)

            let apiCall:Promise<any>
            if( isEmpty(branch) ) {
                apiCall = addBranch(fields)
            } else {
                apiCall = updateBranch(branch.id, fields)
            }

            apiCall.then((res:any)=>{
                toast({
                    title: "Branch updated.",
                    status: "success",
                    duration: 9000,
                    isClosable: true,
                })
                setTimeout(()=>{
                    router.push("/")
                },1000)
            }).catch((err:any)=>{
                toast({
                    title: err.message,
                    status: "error",
                    duration: 4000,
                    isClosable: true,
                })
            }).finally(()=>{
                setIsLoading(false)
            })
        } else {
            let errs:any = {}
            if( isEmpty(fields.name) ) errs.name = true
            if( isEmpty(fields.open) ) errs.open = true
            if( isEmpty(fields.close) ) errs.close = true
            if( isEmpty(fields.lat) ) errs.lat = true
            if( isEmpty(fields.lng) ) errs.lng = true

            setErrors(errs)
        }
        
    }

    const renderPostForm = () => {
      return <>
        <Head>
            <title>{!isEmpty(branch) ? 'Edit Data' : 'Add Branch'}</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className={styles.content}>
            <h2 className={styles.title}>
                {!isEmpty(branch) ? 'Edit Data' : 'Add Branch'}
            </h2>

            <div className={styles.description}>
                <Button colorScheme="blue" variant="outline" onClick={onBack}>Back to Index</Button>
            </div>

            {renderEditForm()}

        </main></>
    }

    const renderEditForm = () => {
      return <div className={styles.form}>
            <FormControl id="name" style={{marginBottom:20}} isInvalid={errors?.name?true:false} >
                <FormLabel>Name</FormLabel>
                <Input value={fields.name} name="name" onChange={handleChange} type="text" />
                {errors.name && <FormErrorMessage>Please Enter branch name</FormErrorMessage>}
            </FormControl>

            <Grid
                templateColumns="repeat(2, 1fr)"
                gap={4}
                style={{marginBottom:20}}
            >
                <GridItem>
                    <FormControl id="OpeningO" isInvalid={errors?.open?true:false} >
                        <FormLabel>Open</FormLabel>
                        <Input value={fields.open} name="open" onChange={handleChange} type="time" />
                        {errors.open && <FormErrorMessage>Please enter open time</FormErrorMessage>}
                    </FormControl>
                </GridItem>
                <GridItem>
                    <FormControl id="OpeningC" isInvalid={errors?.close?true:false}>
                        <FormLabel>Close</FormLabel>
                        <Input value={fields.close} name="close"onChange={handleChange} type="time" />
                        {errors.close && <FormErrorMessage>Please enter closed time</FormErrorMessage>}
                    </FormControl>
                </GridItem>
            </Grid>

            <Grid
                templateColumns="repeat(2, 1fr)"
                gap={4}
                style={{marginBottom:20}}
            >
                <GridItem>
                    <FormControl id="lat" isInvalid={errors?.lat?true:false}>
                        <FormLabel>Latitude</FormLabel>
                        <Input type="text" value={fields.lat} name="lat" onChange={handleChange}  />
                        {errors.lat && <FormErrorMessage>Please enter latitude coord</FormErrorMessage>}
                    </FormControl>
                </GridItem>
                <GridItem>
                    <FormControl id="long" isInvalid={errors?.lng?true:false}>
                        <FormLabel>Longitude</FormLabel>
                        <Input type="text" value={fields.lng} name="lng" onChange={handleChange} />
                        {errors.lng && <FormErrorMessage>Please enter longitude coord</FormErrorMessage>}
                    </FormControl>
                </GridItem>
            </Grid>

            <div className={styles.description}>
                <Button size="lg" colorScheme="blue" onClick={onSubmit} isLoading={isLoading}>Submit</Button>
            </div>
        </div>
    }

    return (
        <div className={styles.container}>
            {props.error ? <div>
                Not found Branch {props.error.message}
            </div> : renderPostForm()}
        </div>
    )
}

/* getServerSideProps */
export async function getServerSideProps(context:any) {
    const { params, req } = context;  
    let branch:any = {};
    let errs:any = null
    if (params.slug !== 'add') {
        try {
            const resApi = await Api.singleRequest(Api.getBranch({},params.slug));
            branch = resApi.data.data
        } catch (error) {
            errs = error   
        }
    }
  
    return {
      props: {
        branch,
        error:errs
      },
    };
  }

export default BranchItem