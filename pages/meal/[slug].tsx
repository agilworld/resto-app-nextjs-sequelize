import { useState, useEffect } from 'react'
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import styles from '../../styles/Home.module.css'
import { NextPage } from 'next'
import { useRouter } from 'next/router'
import { 
    useToast,
    Grid,
    GridItem,
    Box,
    Button, 
    FormControl,
    FormLabel,
    Input,
    FormErrorMessage,
    FormHelperText,
} from "@chakra-ui/react"
import Api, { errorCondition } from "../../api"
import { isEmpty } from "lodash"
import { BranchItemData, BranchPostData, PropsData } from "../../_types/BranchProps"
import { absoluteUrl } from "../../utils"

const addMeal = (fields:any) => {
    return new Promise((resolve, reject)=>{
        Api.singleRequest(Api.createMeal(fields)).then((data:any)=>{
            resolve(data)
        }).catch((err:any)=>{
            reject(err)
        })
    })
    
}

const MealItem: NextPage = ({query,...props}:any) => {
    const [isLoading, setIsLoading] = useState(false)
    const [name, setName] = useState<string>("")
    const [errors, setErrors] = useState<any>({})
    const router = useRouter()
    const toast = useToast()

    const handleChange = (e:any) =>{
        setName(e.target.value)
    }

    const onBack = (e:any) => {
        e.preventDefault()
        router.push(`/branch?id=${query.branch}`)
    }

    const onSubmit = () => {
        if( ! isEmpty(name) ) {
            setIsLoading(true)
            addMeal({name:name,branch:query.branch})
                .then(res=>{
                    toast({
                        title: "New meal created.",
                        description: "We've created new meal.",
                        status: "success",
                        duration: 9000,
                        isClosable: true,
                    })
                    router.push("/branch?id="+query.branch)
                })
                .catch(err=>{
                    toast({
                        title: err.message,
                        status: "error",
                        duration: 9000,
                        isClosable: true,
                    })
                })
                .finally(()=>{
                    setIsLoading(false)
                })
        } else {
            let errs:any = {}
            if( isEmpty(name) ) errs.name = true
            setErrors(errs)
        }
        
    }

    const renderPostForm = () => {
      return <>
        <Head>
            <title>Add Meal of Branch</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className={styles.slimcontent}>
            <h3 className={styles.title}>
                Add New Meal
            </h3>

            <div className={styles.description}>
                <Button colorScheme="blue" variant="outline" onClick={onBack}>Back to Index</Button>
            </div>

            {renderEditForm()}

        </main></>
    }

    const renderEditForm = () => {
      return <div className={styles.form}>
            <FormControl id="name" style={{marginBottom:20}} isInvalid={errors?.name?true:false} >
                <FormLabel>Name</FormLabel>
                <Input value={name} name="name" onChange={handleChange} type="text" />
                {errors.name && <FormErrorMessage>Please enter meal name</FormErrorMessage>}
            </FormControl>

            <div className={styles.description}>
                <Button size="lg" colorScheme="blue" onClick={onSubmit} isLoading={isLoading}>Submit</Button>
            </div>
        </div>
    }

    return (
        <div className={styles.container}>
            {props.error ? <div>
                Not found Branch {props.error.message}
            </div> : renderPostForm()}
        </div>
    )
}


/* getServerSideProps */
export async function getServerSideProps(context:any) {
    const { params, query, req } = context;  
    let meal:any = {};
    let errs:any = null
    if (params.slug !== 'add') {
        try {
            const resApi = await Api.singleRequest(Api.getMeals({},params.slug));
            meal = resApi.data.data
        } catch (error) {
            errs = error   
        }
    } 

    return {
      props: {
        meal,
        query,
        error:errs
      },
    };
  }


export default MealItem